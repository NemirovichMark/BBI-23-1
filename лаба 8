using System;
using System.ComponentModel.Design;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using static System.Runtime.InteropServices.JavaScript.JSType;

abstract class Task
{
    public Task(string text) { }
    public abstract void ParseText(string text); 
}
public struct LetterInfo
{
    public char Letter { get; set; }
    public int Count { get; set; }

    public void IncrementCount()
    {
        Count++;
    }
}

class Task_1 : Task
{
    private List<LetterInfo> letterInfos; // Список для хранения информации о буквах и их частоте

    public Task_1(string text) : base(text)
    {
        letterInfos = new List<LetterInfo>();
    }
    public override void ParseText(string text)
    {
        // Разбиение текста на слова с помощью заданных разделителей
        string[] words = text.Split(new char[] { ' ', ',', '.', '!', '?', ')', '(', '"', '-' }, StringSplitOptions.RemoveEmptyEntries);

        // Перебор каждого слова в массиве слов
        foreach (string word in words)
        {
            if (!string.IsNullOrEmpty(word)) // Проверка, что слово не пустое
            {
                char firstLetter = word.FirstOrDefault(char.IsLetter); // Получение первой буквы слова

                if (firstLetter != default(char)) // Проверка, что первый символ является буквой
                {
                    firstLetter = char.ToLowerInvariant(firstLetter); // Приведение первой буквы к нижнему регистру

                    // Поиск структуры LetterInfo с текущей буквой в списке
                    LetterInfo letterInfo = letterInfos.FirstOrDefault(li => li.Letter == firstLetter);

                    if (letterInfo.Letter == default(char)) // Если буква не найдена в списке
                    {
                        // Добавление новой структуры LetterInfo в список с частотой 1
                        letterInfos.Add(new LetterInfo { Letter = firstLetter, Count = 1 });
                    }
                    else // Если буква найдена в списке
                    {
                        // Увеличение частоты повторений буквы в найденной структуре LetterInfo
                        letterInfo.IncrementCount();
                    }
                }
            }
        }
    }
    public void Print()
    {
        Console.WriteLine("Статистика частоты повторения буквы:");
        foreach (var letterInfo in letterInfos.OrderBy(li => li.Letter))
        {
            char letter = letterInfo.Letter;      // Получение буквы из структуры
            int count = letterInfo.Count;         // Получение частоты повторений буквы из структуры

            double percent = (double)count / letterInfos.Sum(li => li.Count) * 100;
            Console.WriteLine($"Буква '{letter}': {percent:F2}%");
        }
    }
}

class Task_3 : Task
{
    private List<string> splittedText;
    public Task_3(string text) : base(text)
    {
        splittedText = new List<string>();
    }

    public override void ParseText(string text)
    {
        int startIndex = 0;
        int endIndex = 50;

        while (startIndex < text.Length)
        {
            int spaceIndex = text.LastIndexOf(' ', endIndex - 1, endIndex - startIndex);

            if (spaceIndex == -1 || spaceIndex == startIndex)
            {
                splittedText.Add(text.Substring(startIndex, endIndex - startIndex));
                startIndex = endIndex;
            }
            else
            {
                splittedText.Add(text.Substring(startIndex, spaceIndex - startIndex));
                startIndex = spaceIndex + 1;
            }
            endIndex = Math.Min(startIndex + 50, text.Length);
        }
        Console.WriteLine("Разбитый текст:");
        foreach (string line in splittedText)
        {
            Console.WriteLine(line);
        }
    }
}


class Task_6 : Task
{
    public Task_6(string text) : base(text) { }

    public override void ParseText(string text)
    {
        string[] words = text.Split(new char[] { ' ', ',', '.', '!', '?', ')', '(', '"', '-' }, StringSplitOptions.RemoveEmptyEntries);
        int[] countSyllables = new int[words.Length];
        int i = 0;
        foreach (string word in words)
        {
            int syllables = 0;
            if (!string.IsNullOrEmpty(word))
            {
                foreach (char letter in word.ToLower())
                {
                    if ("aeiouаеёиоуыэюя".Contains(letter))
                    {
                        syllables++;
                    }
                }
                countSyllables[i] = syllables;
                i++;
            }
        }
        Array.Sort(countSyllables);
        int count = 0;
        for (int j = 1; j < countSyllables.Length; j++)
        {
            if (countSyllables[j - 1] != countSyllables[j])
            {
                Console.WriteLine(countSyllables[j] + " слог(а): " + count);
                count = 0;
            }
            else { count++; }
        }
    }
}

class Task_12 : Task
{
    private Dictionary<string, int> table;
    private List<string> words;
    private List<string> mfwords;
    public Task_12(string text) : base(text)
    {
        table = new Dictionary<string, int>();
        words = new List<string>();
        mfwords = new List<string>();

        mfwords = MostFrequency(text);

        for (int i = 0; i < mfwords.Count; i++)
        {
            table.Add(mfwords[i], i);
        }
        string[] splitText = text.Split(' ');
        foreach (string word in splitText)
        {
            words.Add(word);
        }
    }
    public string ReplaceWords()
    {
        for (int i = 0; i < words.Count; i++)
        {
            if (table.ContainsKey(words[i]))
            {
                words[i] = table[words[i]].ToString();
            }
        }
        return string.Join(" ", words);
    }

    public List<string> MostFrequency(string text)
    {
        Dictionary<string, int> wordFrequency = new Dictionary<string, int>();
        string[] words = text.Split(new char[] { ' ', ',', '.', '!', '?', ')', '(', '"', '-' }, StringSplitOptions.RemoveEmptyEntries);
        foreach (string word in words)
        {
            if (wordFrequency.ContainsKey(word))
            {
                wordFrequency[word]++;
            }
            else
            {
                wordFrequency[word] = 1;
            }
        }

        var sortedWords = wordFrequency.OrderByDescending(pair => pair.Value).Take(5).Select(pair => pair.Key).ToList();
        Console.WriteLine(string.Join(" ", sortedWords));
        return sortedWords;
    }
    public override void ParseText(string text) { }
}

class Task_13 : Task
{
    private List<LetterInfo> letterInfos; // Список для хранения информации о буквах и их частоте

    public Task_13(string text) : base(text)
    {
        letterInfos = new List<LetterInfo>();
    }
    public override void ParseText(string text)
    {
        // Разбиваем текст на слова, игнорируя разделители и удаляем пустые элементы
        string[] words = text.Split(new char[] { ' ', ',', '.', '!', '?', ')', '(', '"', '-' }, StringSplitOptions.RemoveEmptyEntries);

        // Для каждого слова из полученного массива слов
        foreach (string word in words)
        {
            // Проверяем, не пустое ли это слово
            if (!string.IsNullOrEmpty(word))
            {
                // Получаем первую букву слова в нижнем регистре
                char firstLetter = char.ToLowerInvariant(word[0]);

                // Проверяем, является ли первый символ буквой
                if (char.IsLetter(firstLetter))
                {
                    // Поиск структуры LetterInfo с текущей буквой в списке
                    LetterInfo letterInfo = letterInfos.FirstOrDefault(li => li.Letter == firstLetter);

                    if (letterInfo.Letter == default(char)) // Если буква не найдена в списке
                    {
                        // Добавление новой структуры LetterInfo в список с частотой 1
                        letterInfos.Add(new LetterInfo { Letter = firstLetter, Count = 1 });
                    }
                    else // Если буква найдена в списке
                    {
                        // Увеличение счетчика повторений буквы в найденной структуре LetterInfo
                        letterInfo.IncrementCount();
                    }
                }
            }
        }
    }
    public void Print()
    {
        Console.WriteLine("Статистика слов, начинающихся на различные буквы:");

        foreach (var letterInfo in letterInfos.OrderBy(li => li.Letter))
        {
            char letter = letterInfo.Letter;      // Получение буквы из структуры
            int count = letterInfo.Count;         // Получение частоты повторений буквы из структуры

            double percentage = (double)count / letterInfos.Sum(li => li.Count) * 100;
            Console.WriteLine($"Буква '{letter}': {percentage:F2}%");
        }
    }
}

class Task_15 : Task
{
    private List<int> digits;
    public Task_15(string text) : base(text)
    {
        digits = new List<int>();
    }

    public override void ParseText(string text)
    {
        string[] words = text.Split(new char[] { ' ', ',', '.', '!', '?', ')', '(', '"', '-' }, StringSplitOptions.RemoveEmptyEntries);
        foreach (string word in words)
        {
            string digit = "";
            if (!string.IsNullOrEmpty(word))
            {
                foreach (char letter in word)
                {
                    if (char.IsDigit(letter)) { digit += letter; }
                }
                if (digit.Length > 0) { digits.Add(int.Parse(digit)); }
            }
        }
        Console.WriteLine("Сумма всех чисел в тексте:" + digits.Sum(x => x));
    }
}

class Program
{
    public static void Main()
    {
        string inputText = Console.ReadLine();

        Task_1 task1 = new Task_1(inputText);
        task1.ParseText(inputText);
        task1.Print();
        Console.WriteLine();

        inputText = Console.ReadLine();
        Task_3 task3 = new Task_3(inputText);
        task3.ParseText(inputText);
        Console.WriteLine();

        inputText = Console.ReadLine();
        Task_6 task6 = new Task_6(inputText);
        task6.ParseText(inputText);
        Console.WriteLine();

        Task_12 task12 = new Task_12(inputText);
        Console.WriteLine("Текст с замененными кодами:");
        Console.WriteLine(task12.ReplaceWords());
        Console.WriteLine();

        //inputText = Console.ReadLine();
        //Task_13 task13 = new Task_13(inputText);
        //task13.ParseText(inputText);
        //task13.Print();
        //Console.WriteLine();

        //inputText = Console.ReadLine();
        //Task_15 task15 = new Task_15(inputText);
        //task15.ParseText(inputText);
        //Console.WriteLine();
    }
}
